package JFrameN;
import java.awt.Image;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import Controlador.facturacion;
import Modelo.factura;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JOptionPane;
import Controlador.PedidosController;
import Modelo.Productos;
import java.util.Date;
import javax.swing.JInternalFrame;


public class Pago extends javax.swing.JInternalFrame {
    private PedidosController pedidoController;
    private facturacion controladorFacturacion;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    
    public Pago(PedidosController pedidoController) {
        this.pedidoController = pedidoController;
         this.controladorFacturacion = new facturacion();
        initComponents();
        mostrarResumenPedido();
       // this.setLocationRelativeTo(this);
        this.Imagen(this.LblImgaen, "src/Img/Restaurante.jpg");
        this.Imagen(this.LblImgaen1, "src/Img/Pago.png");
        this.Imagen(this.LblImgaen2, "src/Img/1.png");
        this.Imagen(this.LblImgaen3, "src/Img/2.png");
 
                mostrarListado();
        jCheckBox1.addItemListener(e -> {
    if (jCheckBox1.isSelected()) jCheckBox2.setSelected(false);
});
jCheckBox2.addItemListener(e -> {
    if (jCheckBox2.isSelected()) jCheckBox1.setSelected(false);
});
    }
    private void mostrarResumenPedido() {
         if (pedidoController.getProductosSeleccionados().isEmpty()) {
            lblLista.setText("<html><h2>No hay productos en el pedido</h2></html>");
            return;
        }

        StringBuilder sb = new StringBuilder("<html><h2>Resumen de Pedido</h2><ul>");
        
        for (Productos p : pedidoController.getProductosSeleccionados()) {
            sb.append("<li>").append(p.getNombre())
              .append(" (x").append(p.getCantidad()).append(")")
              .append(" - $").append(String.format("%.2f", p.getPrecio() * p.getCantidad()))
              .append("</li>");
        }
        
        sb.append("</ul><b>Total: $").append(String.format("%.2f", pedidoController.getTotal()))
          .append("</b></html>");
        
        lblLista.setText(sb.toString());
    }

    private ImageIcon imagen;
    private Icon icono;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        LblImgaen1 = new javax.swing.JLabel();
        LblImgaen3 = new javax.swing.JLabel();
        LblImgaen2 = new javax.swing.JLabel();
        lblLista = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        BtnRegresar = new javax.swing.JButton();
        BtnPagar = new javax.swing.JButton();
        LblImgaen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(LblImgaen1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 440, 160));
        jPanel1.add(LblImgaen3, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 0, 230, 140));
        jPanel1.add(LblImgaen2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 220, 140));

        lblLista.setBackground(new java.awt.Color(255, 204, 0));
        lblLista.setFont(new java.awt.Font("SimSun-ExtB", 0, 12)); // NOI18N
        lblLista.setForeground(new java.awt.Color(0, 51, 153));
        jPanel1.add(lblLista, new org.netbeans.lib.awtextra.AbsoluteConstraints(157, 200, 410, 160));

        jCheckBox2.setBackground(new java.awt.Color(255, 204, 0));
        jCheckBox2.setFont(new java.awt.Font("SimSun-ExtB", 1, 24)); // NOI18N
        jCheckBox2.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBox2.setText("Tarjeta");
        jPanel1.add(jCheckBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 380, 400, 40));

        jCheckBox1.setBackground(new java.awt.Color(255, 204, 0));
        jCheckBox1.setFont(new java.awt.Font("SimSun-ExtB", 1, 24)); // NOI18N
        jCheckBox1.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBox1.setText("Efectivo");
        jPanel1.add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 410, 400, 40));

        BtnRegresar.setBackground(new java.awt.Color(153, 0, 0));
        BtnRegresar.setFont(new java.awt.Font("Segoe UI Emoji", 1, 24)); // NOI18N
        BtnRegresar.setForeground(new java.awt.Color(255, 204, 0));
        BtnRegresar.setText("Regresar");
        BtnRegresar.setToolTipText("");
        BtnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnRegresarActionPerformed(evt);
            }
        });
        jPanel1.add(BtnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 530, 180, 40));

        BtnPagar.setBackground(new java.awt.Color(153, 0, 0));
        BtnPagar.setFont(new java.awt.Font("Segoe UI Emoji", 1, 24)); // NOI18N
        BtnPagar.setForeground(new java.awt.Color(255, 204, 0));
        BtnPagar.setText("Pagar");
        BtnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPagarActionPerformed(evt);
            }
        });
        jPanel1.add(BtnPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 480, 220, 50));

        LblImgaen.setAutoscrolls(true);
        jPanel1.add(LblImgaen, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 590));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }
    //GEN-LAST:event_BtnRegresarActionPerformed
    //GEN-LAST:event_BtnPagarActionPerformed
    // </editor-fold>//GEN-END:initComponents
// </editor-fold>//GEN-END:initComponents

    private void mostrarListado() {
        List<factura> lista = controladorFacturacion.obtenerTodos();
        StringBuilder sb = new StringBuilder("<html>");
        sb.append("<h2>Listado de Facturas</h2>");
        sb.append("<table border='1'><tr><th>ID</th><th>Cliente</th><th>Fecha</th><th>Productos</th><th>Usuario</th><th>Costo</th></tr>");
        for (factura f : lista) {
            sb.append("<tr>")
              .append("<td>").append(f.getId_factura()).append("</td>")
              .append("<td>").append(f.getCliente()).append("</td>")
              .append("<td>").append(sdf.format(f.getFecha_actual())).append("</td>")
              .append("<td>").append(f.getProductos_consumidos()).append("</td>")
              .append("<td>").append(f.getUsuario_atendio()).append("</td>")
              .append("<td>").append(f.getCosto_total()).append("</td>")
              .append("</tr>");
        }
        sb.append("</table></html>");
        lblLista.setText(sb.toString());
    }
    
    /**
     * @param args the command line arguments
     */
 
    
    private void Imagen(JLabel lbl, String ruta){
        this.imagen = new ImageIcon(ruta);
        this.icono = new ImageIcon(
                this.imagen.getImage().getScaledInstance(lbl.getWidth(), 
                        lbl.getHeight(), 
                        Image.SCALE_DEFAULT)
        );
        lbl.setIcon(this.icono);
        this.repaint();
    }
    private void BtnPagarActionPerformed(java.awt.event.ActionEvent evt) {
        procesarPago();
    }

    private void BtnRegresarActionPerformed(java.awt.event.ActionEvent evt) {
        int opcion = JOptionPane.showConfirmDialog(
            this, 
            "¿Desea salir sin procesar el pago?", 
            "Confirmar salida", 
            JOptionPane.YES_NO_OPTION
        );
        
        if (opcion == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }
    
     private void procesarPago() {
        if (pedidoController.getProductosSeleccionados().isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "No hay productos en el pedido para pagar", 
                "Pedido Vacío", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (!jCheckBox1.isSelected() && !jCheckBox2.isSelected()) {
            JOptionPane.showMessageDialog(this, 
                "Seleccione un método de pago", 
                "Método de Pago Requerido", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        String metodoPago = jCheckBox1.isSelected() ? "EFECTIVO" : "TARJETA";
        
        try {
            // Crear la factura
            String productosStr = obtenerDescripcionProductos();
            double total = pedidoController.getTotal();
            
            controladorFacturacion.agregarPedido(
                0, // ID se generará automáticamente
                "Cliente", // Puedes pedir el nombre del cliente
                new Date(),
                productosStr,
                "usuario",
                total
            );
            
            // Mostrar confirmación
            JOptionPane.showMessageDialog(
                this, 
                "Pago procesado correctamente\n" +
                "Método: " + metodoPago + "\n" +
                "Total: $" + String.format("%.2f", total), 
                "Pago Exitoso", 
                JOptionPane.INFORMATION_MESSAGE
            );
            
            // Limpiar y cerrar
            pedidoController.limpiarPedido();
            this.dispose();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(
                this, 
                "Error al procesar el pago: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
     private String obtenerDescripcionProductos() {
        StringBuilder sb = new StringBuilder();
        for (Productos p : pedidoController.getProductosSeleccionados()) {
            sb.append(p.getNombre())
              .append(" (x").append(p.getCantidad()).append(")")
              .append(" - $").append(p.getPrecio() * p.getCantidad())
              .append("\n");
        }
        return sb.toString();
    }

     


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnPagar;
    private javax.swing.JButton BtnRegresar;
    private javax.swing.JLabel LblImgaen;
    private javax.swing.JLabel LblImgaen1;
    private javax.swing.JLabel LblImgaen2;
    private javax.swing.JLabel LblImgaen3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblLista;
    // End of variables declaration//GEN-END:variables
}